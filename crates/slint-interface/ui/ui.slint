import { LineEdit, HorizontalBox, Button, VerticalBox, Palette, Switch, TabWidget, TextEdit } from "std-widgets.slint";
import { AboutSlintWindow } from "about.slint";

/*
The structure is as followed:

+--------------------------------------------+
|               MainWindow                   |
| +----------------------------------------+ |
| |            base-area                   | |
| | +------------------------------------+ | |
| | |    header-area (HorizontalBox)     | | |
| | +------------------------------------+ | |
| | |       main-area (HorizontalBox)    | | |
| | | +----------------+---------------+ | | |
| | | |(VerticalBox)   |  (VerticalBox)| | | |
| | | +----------------+---------------+ | | |
| | +------------------------------------+ | |
| +----------------------------------------+ |
*/

export global Logic {
    // Implementation of this callback is seen in the business logic (Rust script).
    pure callback translate-text(string) -> string;
    pure callback show-about-slint();
}

export component AboutSlintWindow inherits AboutSlintWindow { }

export component MainWindow inherits Window {

    //child windows

    // about-slint := AboutSlintWindow {
    //     x: root.x + root.width / 2 - self.width / 2;
    //     y: root.y + root.height / 2 - self.height / 2;
    // }

    min-height: 500px;
    preferred-height: self.min-height;

    min-width: 800px;
    preferred-width: self.min-width;

    base-area := VerticalBox {

        header-area := HorizontalBox {
            alignment: LayoutAlignment.space-between;

            HorizontalLayout {
                Text {
                    text: "Neat Translator";
                    font-size: 20px;

                    horizontal-alignment: TextHorizontalAlignment.center;
                    wrap: TextWrap.word-wrap;
                }
            }

            HorizontalLayout {
            // Switch Light/Dark Mode
            Switch {
                    horizontal-stretch: 0;
                    text: @tr("Dark Mode");
                    checked: Palette.color-scheme == ColorScheme.dark;
                    toggled => {
                        Palette.color-scheme = !(Palette.color-scheme == ColorScheme.dark) ? ColorScheme.dark : ColorScheme.light;
                    }
                }

            // About Slint
            Button {
                    text: @tr("About Slint");
                    clicked => {
                    // Show about dialog
                    // about-slint.show();
                    Logic.show-about-slint()
                    }
                }
            }
        }

        main-area := HorizontalBox {
            property <length> left-fix-width: 100px;

            alignment: LayoutAlignment.stretch;

            TabWidget {

                Tab {
                    title: "Word";
                    VerticalLayout {
                        HorizontalBox {
                            max-height: search-line-edit.min-height;
                            search-line-edit := LineEdit {
                                height: 50px;
                                font-size: 24px;
                                accepted => {
                                    t-word.text = Logic.translate-text(search-line-edit.text);
                                    search-line-edit.select-all();
                                    // Implement translation logic here
                                }
                            }

                            Button {
                                text: "Translate";
                                clicked => {
                                    t-word.text = Logic.translate-text(search-line-edit.text)
                                    // Implement translation logic here
                                }
                            }
                        }

                        t-word := Text {
                            text: "";
                            font-size: 16px;
                            wrap: TextWrap.word-wrap;
                        }
                    }
                }

                Tab {
                    title: "Sentenses";
                    VerticalLayout {
                        TextEdit {
                            vertical-stretch: 1;
                            font-size: 16px;
                        }

                        t-Sentense := Text {
                            vertical-stretch: 1;
                            font-size: 16px;
                            wrap: TextWrap.word-wrap;
                        }
                    }
                }
            }
        }
    }
}
