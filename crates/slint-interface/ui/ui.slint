import { LineEdit, HorizontalBox, Button, VerticalBox, Palette, Switch } from "std-widgets.slint";
import { AboutSlintWindow } from "about.slint";

/*
The structure is as followed:

+--------------------------------------------+
|               MainWindow                   |
| +----------------------------------------+ |
| |            base-area                   | |
| | +------------------------------------+ | |
| | |    header-area (HorizontalBox)     | | |
| | +------------------------------------+ | |
| | |       main-area (HorizontalBox)    | | |
| | | +----------------+---------------+ | | |
| | | |(VerticalBox)   |  (VerticalBox)| | | |
| | | +----------------+---------------+ | | |
| | +------------------------------------+ | |
| +----------------------------------------+ |
*/

export global Logic {
    // Implementation of this callback is seen in the business logic (Rust script).
    pure callback translate-text(string) -> string;
    pure callback show-about-slint();
}

export component AboutSlintWindow inherits AboutSlintWindow { }

export component MainWindow inherits Window {

    //child windows

    // about-slint := AboutSlintWindow {
    //     x: root.x + root.width / 2 - self.width / 2;
    //     y: root.y + root.height / 2 - self.height / 2;
    // }

    min-height: 400px;
    preferred-height: self.min-height;

    preferred-width: 800px;

    base-area := VerticalBox {

        header-area := HorizontalBox {
            alignment: LayoutAlignment.end;

            // Switch Light/Dark Mode
            Switch {
                horizontal-stretch: 0;
                text: @tr("Dark Mode");
                checked: Palette.color-scheme == ColorScheme.dark;
                toggled => {
                    Palette.color-scheme = !(Palette.color-scheme == ColorScheme.dark) ? ColorScheme.dark : ColorScheme.light;
                }
            }

            // About Slint
            Button {
                text: @tr("About Slint");
                clicked => {
                    // Show about dialog
                    // about-slint.show();
                    Logic.show-about-slint()
                }
            }
        }

        main-area := HorizontalBox {
            property <length> left-fix-width: 100px;

            alignment: LayoutAlignment.stretch;

            VerticalLayout {
                width: parent.left-fix-width;
                Text {
                    text: "Neat Translator";
                    font-size: 20px;

                    horizontal-alignment: TextHorizontalAlignment.center;
                    wrap: TextWrap.word-wrap;
                }
            }

            Rectangle {
                width: 0.5px;
                height: 100%;
                background: Palette.color-scheme == ColorScheme.dark ? dimgray : lightgray;
            }

            VerticalLayout {

                HorizontalBox {
                    max-height: search-line-edit.min-height;
                    search-line-edit := LineEdit {
                        height: 50px;
                        font-size: 24px;
                        accepted => {
                            t.text = Logic.translate-text(search-line-edit.text);
                            search-line-edit.select-all();
                    // Implement translation logic here
                }
                    }

                    Button {
                        text: "Translate";
                        clicked => {
                            t.text = Logic.translate-text(search-line-edit.text)
                        // Implement translation logic here
                    }
                    }
                }

                t := Text {
                    text: "";
                    font-size: 16px;
                }
            }
        }
    }
}
