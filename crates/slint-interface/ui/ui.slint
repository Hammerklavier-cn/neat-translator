import { LineEdit, HorizontalBox, Button, VerticalBox, Palette, Switch, TabWidget, TextEdit } from "std-widgets.slint";
import { AboutSlintWindow } from "about.slint";
import {SettingWindow} from "settings.slint";
import { ErrorWindow } from "hint.slint";

/*
The structure is as followed:

+--------------------------------------------+
|               MainWindow                   |
| +----------------------------------------+ |
| |            base-area                   | |
| | +------------------------------------+ | |
| | |    header-area (HorizontalBox)     | | |
| | +------------------------------------+ | |
| | |       main-area (HorizontalBox)    | | |
| | | +--------------------------------+ | | |
| | | |      TabWidget Titles          | | | |
| | | | +----------------------------+ | | | |
| | | | |         Tabs               | | | | |
| | | | +----------------------------+ | | | |
| | | +--------------------------------+ | | |
| | +------------------------------------+ | |
| +----------------------------------------+ |
*/

export global Logic {
    // Implementation of this callback is seen in the business logic (Rust script).
    pure callback translate-word(string) -> string;
    pure callback show-about-slint();
    pure callback show-setting-window();
    pure callback translate-sentence(string);
}

export component AboutSlintWindow inherits AboutSlintWindow { }

export component SettingWindow inherits SettingWindow { }

export component ErrorWindow inherits ErrorWindow {
    in-out property <string> error-text <=> self.text;
    in-out property <string> error-hint <=> self.hint;
}

export component MainWindow inherits Window {
    in-out property <string> original-text <=> sentence-original-textedit.text;
    in-out property <string> sentence-translate-result <=> sentence-translated-textedit.text;
    in-out property <string> api-key: "sk-xx";

    min-height: 500px;
    preferred-height: self.min-height;

    min-width: 800px;
    preferred-width: self.min-width;

    base-area := VerticalBox {

        header-area := HorizontalBox {
            alignment: LayoutAlignment.space-between;

            HorizontalLayout {
                Text {
                    text: "Neat Translator";
                    font-size: 20px;

                    horizontal-alignment: TextHorizontalAlignment.center;
                    wrap: TextWrap.word-wrap;
                }
            }

            HorizontalLayout {

                Switch {     // Switch Light/Dark Mode
                    horizontal-stretch: 0;
                    text: @tr("Dark Mode");
                    checked: Palette.color-scheme == ColorScheme.dark;
                    toggled => {
                        Palette.color-scheme = !(Palette.color-scheme == ColorScheme.dark) ? ColorScheme.dark : ColorScheme.light;
                    }
                }

                Button {    // About Slint
                    text: @tr("About Slint");
                    clicked => {
                        Logic.show-about-slint()
                    }
                }
            }

            // Settings
            Button {
                text: @tr("Settings");
                clicked => {
                    Logic.show-setting-window();
                }
            }
        }

        main-area := HorizontalBox {
            property <length> left-fix-width: 100px;

            alignment: LayoutAlignment.stretch;

            TabWidget {

                Tab {   // Word translation
                    title: "Word";
                    VerticalLayout {
                        HorizontalBox {
                            max-height: search-line-edit.min-height;
                            search-line-edit := LineEdit {
                                height: 50px;
                                font-size: 24px;
                                accepted => {
                                    t-word.text = Logic.translate-word(search-line-edit.text);
                                    search-line-edit.select-all();
                                    // Implement translation logic here
                                }
                            }

                            Button {
                                text: "Translate";
                                clicked => {
                                    t-word.text = Logic.translate-word(search-line-edit.text)
                                    // Implement translation logic here
                                }
                            }
                        }

                        t-word := Text {
                            text: "";
                            font-size: 16px;
                            wrap: TextWrap.word-wrap;
                        }
                    }
                }

                Tab {   // Sentence translation
                    title: "Sentences";

                    private property <int> seconds: 1;
                    private property <string> old-string;
                    private property <string> new-string;

                    // timer := Timer {
                    //     interval: 3s;
                    //     running: false;
                    //     triggered() => {
                    //         new-string = original-textedit.text;
                    //         if (old-string == new-string) {
                    //             // translated-text.text = Logic.translate-sentence(new-string);
                    //             debug("Timer: old string is " + old-string + "New string is" + new-string);
                    //             Logic.translate-sentence(new-string);
                    //             self.running = false;
                    //         }
                    //     }
                    // }

                    HorizontalBox {
                        alignment: LayoutAlignment.stretch;
                        sentence-original-textedit := TextEdit {
                            width: 50%;
                            font-size: 16px;
                            wrap: TextWrap.word-wrap;

                            // edited(text) => {
                            //     old-string = self.text;
                            //     if (timer.running == true) {
                            //         timer.running = false;
                            //         timer.running = true;
                            //         debug("Reactivate timer.")
                            //     } else {
                            //         timer.running = true;
                            //         debug()
                            //     }
                            //     debug("text is edited to " + self.text);
                            // }

                            key-pressed(event) => {
                                if (event.modifiers.control && (event.text == "\n")) {
                                    debug("Pressed Ctrl + Enter");
                                    Logic.translate-sentence(sentence-original-textedit.text);
                                    return EventResult.accept;
                                } else {
                                    return EventResult.reject;
                                }
                            }
                        }

                        sentence-translated-textedit := Text {
                            width: 50%;
                            font-size: 16px;
                            wrap: TextWrap.word-wrap;
                            // read-only: true;
                        }
                    }
                }
            }
        }
    }
}
